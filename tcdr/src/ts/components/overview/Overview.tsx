import React from "react";
import type { OverviewTotals, OverviewSummary, OverviewHistory } from "@/types";

type OverviewProps = {
  summary: OverviewSummary;
  totals: OverviewTotals;
  history?: OverviewHistory[];
};

/* =========================================================================
   Overview (root)
   ========================================================================= */

export default function Overview({
  summary,
  totals,
  history,
}: OverviewProps) {
  return (
    <section className="space-y-6">
      <SummaryBar info={summary} totals={totals} />
      <KpiGrid totals={totals} history={history} />
    </section>
  );
}

/* =========================================================================
   SummaryBar
   ========================================================================= */

function SummaryBar({ info, totals }: { info: OverviewSummary; totals: OverviewTotals }) {
  return (
    <div className="card glass-surface shadow-primary/10">
      <div className="card-body flex flex-col gap-4 py-5 lg:flex-row lg:items-center lg:justify-between">
        <div className="flex items-start gap-3">
          <div>
            <p className="text-xs uppercase tracking-[0.36em] text-base-content/50">
              Coverage snapshot
            </p>
            <h2 className="mt-1 text-2xl font-semibold leading-tight">
              {fmtPct(totals.lines.pct)} overall line coverage
            </h2>
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-3 text-sm lg:max-w-xl">
          <Badge label="Parser" value={info.parser} />
          <Badge label="Assemblies" value={info.assemblies} />
          <Badge label="Classes" value={info.classes} />
          <Badge label="Files" value={info.files} />
        </div>
        <div className="flex flex-col gap-1 text-xs text-base-content/60 lg:text-right">
          {info.generatedBy && <span>Generated by {info.generatedBy}</span>}
          {info.generatedAt && <span>{formatDate(info.generatedAt)}</span>}
        </div>
      </div>
    </div>
  );
}

function Badge({ label, value }: { label: string; value: React.ReactNode }) {
  return (
    <div className="inline-flex items-center gap-2 rounded-full border border-base-content/10 bg-base-100/80 px-3 py-1 backdrop-blur">
      <span className="text-xs uppercase tracking-wide text-base-content/50">{label}</span>
      <span className="text-sm font-semibold">{value ?? "—"}</span>
    </div>
  );
}

/* =========================================================================
   KPI Grid
   ========================================================================= */

function KpiGrid({ totals, history }: { totals: OverviewTotals; history?: OverviewHistory[] }) {
  return (
    <div className="grid gap-4 md:grid-cols-4">
      <KpiCard
        title="Line coverage"
        mainPct={totals.lines.pct}
        counts={[
          ["Covered lines", totals.lines.covered],
          ["Uncovered lines", totals.lines.uncovered],
          ["Coverable lines", totals.lines.coverable],
          ["Total lines", totals.lines.total],
        ]}
        deltaPct={deltaFromHistory(history?.map((h) => h.linePct))}
      />
      <KpiCard
        title="Branch coverage"
        mainPct={totals.branches.pct}
        counts={[
          ["Covered branches", totals.branches.covered],
          ["Total branches", totals.branches.total],
        ]}
        deltaPct={deltaFromHistory(history?.map((h) => h.branchPct))}
      />
      <KpiCard
        title="Method coverage"
        mainPct={totals.methods.pct}
        counts={[
          ["Covered methods", totals.methods.covered],
          ["Fully covered methods", totals.methods.fullCovered],
          ["Total methods", totals.methods.total],
        ]}
        deltaPct={deltaFromHistory(history?.map((h) => h.methodPct))}
      />
      <KpiCard
        title="Full method coverage"
        mainPct={totals.methods.fullPct}
        counts={[
          ["Full method coverage", totals.methods.fullPct != null ? fmtPct(totals.methods.fullPct) : "—"],
          ["Fully covered methods", totals.methods.fullCovered],
          ["Total methods", totals.methods.total],
        ]}
        deltaPct={deltaFromHistory(history?.map((h) => h.fullMethodPct))}
      />
    </div>
  );
}

function KpiCard({
  title,
  mainPct,
  counts,
  deltaPct,
}: {
  title: string;
  mainPct: number;
  counts: [string, number | string | undefined][];
  deltaPct?: number | null;
}) {
  const barClass = getBarClass(mainPct);
  return (
    <div className="card glass-surface shadow-primary/5 transition-shadow hover:shadow-primary/10">
      <div className="card-body gap-4">
        <div className="flex items-start justify-between gap-2">
          <div>
            <p className="text-xs uppercase tracking-[0.3em] text-base-content/50">{title}</p>
            <div className="mt-2 flex items-baseline gap-2">
              <span className="text-4xl font-semibold tabular-nums">{fmtPct(mainPct)}</span>
              <div className="h-2 w-2 rounded-full bg-gradient-to-br from-primary to-accent opacity-70" aria-hidden />
            </div>
          </div>
          <DeltaBadge delta={deltaPct ?? undefined} />
        </div>
        <div className="relative mt-2 h-2.5 w-full overflow-hidden rounded-full bg-base-200/60">
          <div
            className={`h-full ${barClass}`}
            style={{
              width: `${clamp(mainPct, 0, 100)}%`,
              backgroundImage: "linear-gradient(90deg, rgba(37,99,235,0.85), rgba(14,165,233,0.7))",
            }}
          />
        </div>
        <ul className="grid gap-2 text-sm text-base-content/70">
          {counts.map(([k, v]) => (
            <li key={k} className="flex items-center justify-between rounded-lg border border-base-content/5 bg-base-100/60 px-3 py-2">
              <span>{k}</span>
              <span className="font-semibold text-base-content">{v ?? "—"}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

function DeltaBadge({ delta }: { delta?: number | null }) {
  if (!Number.isFinite(delta as number) || (delta as number) === 0) return null;
  const d = delta as number;
  const up = d > 0;
  return (
    <span className={`badge gap-1 ${up ? "badge-success" : "badge-error"}`} title={up ? "Improved" : "Regressed"}>
      <svg width="12" height="12" viewBox="0 0 24 24" aria-hidden>
        {up ? <path fill="currentColor" d="M7 14l5-5 5 5H7z" /> : <path fill="currentColor" d="M7 10l5 5 5-5H7z" />}
      </svg>
      {Math.abs(d).toFixed(1)}%
    </span>
  );
}

/* =========================================================================
   Utils
   ========================================================================= */

function clamp(n: number, min: number, max: number) {
  return Math.min(max, Math.max(min, n));
}

function fmtPct(n: number) {
  return Number.isFinite(n) ? `${clamp(n, 0, 100).toFixed(1)}%` : "—";
}

function getBarClass(pct: number) {
  if (!Number.isFinite(pct)) return "bg-base-300";
  if (pct >= 90) return "bg-success";
  if (pct >= 75) return "bg-info";
  if (pct >= 60) return "bg-warning";
  return "bg-error";
}

function deltaFromHistory(series?: number[]) {
  if (!series || series.length < 2) return null;
  const prev = series[series.length - 2];
  const last = series[series.length - 1];
  if (!Number.isFinite(prev) || !Number.isFinite(last)) return null;
  return +(last - prev).toFixed(1);
}

function formatDate(s: string) {
  const d = new Date(s);
  if (isNaN(+d)) return s;
  const pad = (n: number) => `${n}`.padStart(2, "0");
  return `${pad(d.getDate())}.${pad(d.getMonth() + 1)}.${d.getFullYear()} - ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
}
